#include <iostream>
using namespace std;
 
struct Node
{
	int info;
	Node* next;
};

struct CircularLinkedList
{
	Node* head;
};

void init(CircularLinkedList &cl) {
	cl.head = NULL;
}

Node* createNode(int x) {
	Node *p = new Node;
	p->info = x;
	p->next = NULL;
	return p;
}

void insertFirst(CircularLinkedList &cl, int x) {
	Node *p = createNode(x);
	if (cl.head == NULL) {
		cl.head = p;
		cl.head->next = p;
	}
	else {
		p->next = cl.head;
		Node* pLast = cl.head;
		while (pLast->next!=cl.head)
		{
			pLast = pLast->next;
		}
		pLast->next = p;
		cl.head = p;
	}
}

void insertLast(CircularLinkedList &cl, int x) {
	Node *p = createNode(x);
	if (cl.head == NULL) {
		cl.head = p;
		cl.head->next = p;
	}
	else {
		Node *pLast = cl.head;
		while (pLast->next != cl.head) {
			pLast = pLast->next;
		}
		pLast->next = p;
	}
}

int delFirst(CircularLinkedList &cl) {
	if (cl.head == 0) return 0;
	Node *p = cl.head;
	if (p->next == cl.head) {
		cl.head == NULL;
	}
	else {
		Node *q = cl.head;
		while (q -> next != cl.head) {
			q = q->next;
		}
		cl.head = cl.head->next;
		q->next = cl.head;
	}
	delete p;
	return 1;
}

//int delLast(CircularLinkedList &cl) {
//	if (cl.head == 0) return 0;
//	Node*p = cl.head;
//	Node *pLast = NULL;
//	if (p->next == cl.head) {
//		cl.head == NULL;
//	}
//	else {
//		
//	}
//}

void printList(CircularLinkedList cl) {
	if (cl.head != NULL) {
		Node *p = cl.head;
		do {
			cout << p->info << " ";
			p = p->next;
		} while (p!=cl.head);
	}
}

void destroyList(CircularLinkedList cl) {
	while (cl.head != NULL) {
		delFirst(cl);
	}
}

int main() {

	CircularLinkedList(cl);
	init(cl);

	insertFirst(cl, 30);
	insertLast(cl, 20);


	printList(cl);
	system("pause");
	return 1;
}
